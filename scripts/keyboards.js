const NOTES = [{ number: 21, name: "A0", isWhiteKey: true, isPressed: false }, { number: 22, name: "A#0", isWhiteKey: false, isPressed: false }, { number: 23, name: "B0", isWhiteKey: true, isPressed: false }, { number: 24, name: "C1", isWhiteKey: true, isPressed: false }, { number: 25, name: "C#1", isWhiteKey: false, isPressed: false }, { number: 26, name: "D1", isWhiteKey: true, isPressed: false }, { number: 27, name: "D#1", isWhiteKey: false, isPressed: false }, { number: 28, name: "E1", isWhiteKey: true, isPressed: false }, { number: 29, name: "F1", isWhiteKey: true, isPressed: false }, { number: 30, name: "F#1", isWhiteKey: false, isPressed: false }, { number: 31, name: "G1", isWhiteKey: true, isPressed: false }, { number: 32, name: "G#1", isWhiteKey: false, isPressed: false }, { number: 33, name: "A1", isWhiteKey: true, isPressed: false }, { number: 34, name: "A#1", isWhiteKey: false, isPressed: false }, { number: 35, name: "B1", isWhiteKey: true, isPressed: false }, { number: 36, name: "C2", isWhiteKey: true, isPressed: false }, { number: 37, name: "C#2", isWhiteKey: false, isPressed: false }, { number: 38, name: "D2", isWhiteKey: true, isPressed: false }, { number: 39, name: "D#2", isWhiteKey: false, isPressed: false }, { number: 40, name: "E2", isWhiteKey: true, isPressed: false }, { number: 41, name: "F2", isWhiteKey: true, isPressed: false }, { number: 42, name: "F#2", isWhiteKey: false, isPressed: false }, { number: 43, name: "G2", isWhiteKey: true, isPressed: false }, { number: 44, name: "G#2", isWhiteKey: false, isPressed: false }, { number: 45, name: "A2", isWhiteKey: true, isPressed: false }, { number: 46, name: "A#2", isWhiteKey: false, isPressed: false }, { number: 47, name: "B2", isWhiteKey: true, isPressed: false }, { number: 48, name: "C3", isWhiteKey: true, isPressed: false }, { number: 49, name: "C#3", isWhiteKey: false, isPressed: false }, { number: 50, name: "D3", isWhiteKey: true, isPressed: false }, { number: 51, name: "D#3", isWhiteKey: false, isPressed: false }, { number: 52, name: "E3", isWhiteKey: true, isPressed: false }, { number: 53, name: "F3", isWhiteKey: true, isPressed: false }, { number: 54, name: "F#3", isWhiteKey: false, isPressed: false }, { number: 55, name: "G3", isWhiteKey: true, isPressed: false }, { number: 56, name: "G#3", isWhiteKey: false, isPressed: false }, { number: 57, name: "A3", isWhiteKey: true, isPressed: false }, { number: 58, name: "A#3", isWhiteKey: false, isPressed: false }, { number: 59, name: "B3", isWhiteKey: true, isPressed: false }, { number: 60, name: "C4", isWhiteKey: true, isPressed: false }, { number: 61, name: "C#4", isWhiteKey: false, isPressed: false }, { number: 62, name: "D4", isWhiteKey: true, isPressed: false }, { number: 63, name: "D#4", isWhiteKey: false, isPressed: false }, { number: 64, name: "E4", isWhiteKey: true, isPressed: false }, { number: 65, name: "F4", isWhiteKey: true, isPressed: false }, { number: 66, name: "F#4", isWhiteKey: false, isPressed: false }, { number: 67, name: "G4", isWhiteKey: true, isPressed: false }, { number: 68, name: "G#4", isWhiteKey: false, isPressed: false }, { number: 69, name: "A4", isWhiteKey: true, isPressed: false }, { number: 70, name: "A#4", isWhiteKey: false, isPressed: false }, { number: 71, name: "B4", isWhiteKey: true, isPressed: false }, { number: 72, name: "C5", isWhiteKey: true, isPressed: false }, { number: 73, name: "C#5", isWhiteKey: false, isPressed: false }, { number: 74, name: "D5", isWhiteKey: true, isPressed: false }, { number: 75, name: "D#5", isWhiteKey: false, isPressed: false }, { number: 76, name: "E5", isWhiteKey: true, isPressed: false }, { number: 77, name: "F5", isWhiteKey: true, isPressed: false }, { number: 78, name: "F#5", isWhiteKey: false, isPressed: false }, { number: 79, name: "G5", isWhiteKey: true, isPressed: false }, { number: 80, name: "G#5", isWhiteKey: false, isPressed: false }, { number: 81, name: "A5", isWhiteKey: true, isPressed: false }, { number: 82, name: "A#5", isWhiteKey: false, isPressed: false }, { number: 83, name: "B5", isWhiteKey: true, isPressed: false }, { number: 84, name: "C6", isWhiteKey: true, isPressed: false }, { number: 85, name: "C#6", isWhiteKey: false, isPressed: false }, { number: 86, name: "D6", isWhiteKey: true, isPressed: false }, { number: 87, name: "D#6", isWhiteKey: false, isPressed: false }, { number: 88, name: "E6", isWhiteKey: true, isPressed: false }, { number: 89, name: "F6", isWhiteKey: true, isPressed: false }, { number: 90, name: "F#6", isWhiteKey: false, isPressed: false }, { number: 91, name: "G6", isWhiteKey: true, isPressed: false }, { number: 92, name: "G#6", isWhiteKey: false, isPressed: false }, { number: 93, name: "A6", isWhiteKey: true, isPressed: false }, { number: 94, name: "A#6", isWhiteKey: false, isPressed: false }, { number: 95, name: "B6", isWhiteKey: true, isPressed: false }, { number: 96, name: "C7", isWhiteKey: true, isPressed: false }, { number: 97, name: "C#7", isWhiteKey: false, isPressed: false }, { number: 98, name: "D7", isWhiteKey: true, isPressed: false }, { number: 99, name: "D#7", isWhiteKey: false, isPressed: false }, { number: 100, name: "E7", isWhiteKey: true, isPressed: false }, { number: 101, name: "F7", isWhiteKey: true, isPressed: false }, { number: 102, name: "F#7", isWhiteKey: false, isPressed: false }, { number: 103, name: "G7", isWhiteKey: true, isPressed: false }, { number: 104, name: "G#7", isWhiteKey: false, isPressed: false }, { number: 105, name: "A7", isWhiteKey: true, isPressed: false }, { number: 106, name: "A#7", isWhiteKey: false, isPressed: false }, { number: 107, name: "B7", isWhiteKey: true, isPressed: false }, { number: 108, name: "C8", isWhiteKey: true, isPressed: false }]; const NUM_OF_NOTES = NOTES.length; const DEFAULT_RED_MASK_START_POSITION = 10; const DEFAULT_GREEN_MASK_START_POSITION = 21; var NUM_OF_WHITES_VISIBLED_WHOLE_KEYBOARD = 0; for (let i = 0; i < NUM_OF_NOTES; i++) { if (NOTES[i].isWhiteKey) { NUM_OF_WHITES_VISIBLED_WHOLE_KEYBOARD++ } } const NUM_OF_WHITES_VISIBLED_KEYBOARD_1 = 11; const NUM_OF_WHITES_VISIBLED_KEYBOARD_2 = 18; var keyboard0, keyboard1, keyboard2; var widthEachNoteKeyboard0, widthEachNoteKeyboard1, widthEachNoteKeyboard2; var redMask, greenMask; var widthRedMask, widthGreenMask; var initialPointerXRedMask, initialPointerXGreenMask; var isRedMaskDraged = false, isGreenMaskDraged = false; var AcmpSection, ToneSection; var ToneSectionRect = { left: 0, right: 0, top: 0, bottom: 0 }; var redMaskRange = { left: 0, right: 0 }; var isGliding = false; var wheels, pitch, pitchUpper, pitchMid, pitchLower, wheelValue; var centerPitch; var isPitchDraged = false; var pitchValue = 0; var divTwin; var divTransport; function renderKeyboard0() { widthEachNoteKeyboard0 = keyboard0.offsetWidth / NUM_OF_WHITES_VISIBLED_WHOLE_KEYBOARD; widthRedMask = widthEachNoteKeyboard0 * NUM_OF_WHITES_VISIBLED_KEYBOARD_1; widthGreenMask = widthEachNoteKeyboard0 * NUM_OF_WHITES_VISIBLED_KEYBOARD_2; let currentWhiteNoteLeft = 0; for (let i = 0; i < NUM_OF_NOTES; i++) { let currentSpan = document.createElement("span"); currentSpan.setAttribute("id", "key0_" + NOTES[i].number); currentSpan.style.width = widthEachNoteKeyboard0; if (NOTES[i].isWhiteKey) { currentSpan.classList.add("spanWhiteNote"); currentSpan.style.left = currentWhiteNoteLeft; currentSpan.style.height = keyboard0.offsetHeight; currentWhiteNoteLeft += widthEachNoteKeyboard0 } else { currentSpan.classList.add("spanBlackNote"); currentSpan.style.left = (currentWhiteNoteLeft - widthEachNoteKeyboard0 / 2); currentSpan.style.height = (3 * keyboard0.offsetHeight / 5) } keyboard0.appendChild(currentSpan) } } function renderKeyboard1() { keyboard1.style.height = (divTwin.offsetHeight - (2 * document.getElementsByClassName("divTitles")[0].offsetHeight)) / 2; widthEachNoteKeyboard1 = keyboard1.offsetWidth / NUM_OF_WHITES_VISIBLED_KEYBOARD_1; let currentWhiteNoteLeft = 0; for (let i = 0; i < NUM_OF_NOTES; i++) { let currentSpan = document.createElement("span"); currentSpan.setAttribute("id", "key1_" + NOTES[i].number); currentSpan.setAttribute("number", NOTES[i].number); currentSpan.style.width = widthEachNoteKeyboard1; if (NOTES[i].isWhiteKey) { currentSpan.classList.add("spanWhiteNote"); currentSpan.style.left = currentWhiteNoteLeft; currentSpan.style.height = keyboard1.offsetHeight; currentWhiteNoteLeft += widthEachNoteKeyboard1 } else { currentSpan.classList.add("spanBlackNote"); currentSpan.style.left = (currentWhiteNoteLeft - widthEachNoteKeyboard1 / 2); currentSpan.style.height = (3 * keyboard1.offsetHeight / 5) } currentSpan.onmousedown = currentSpan.ontouchstart = function () { let currNumber = parseInt(this.getAttribute("number")); for (let i = 0; i < NOTES.length; i++) { if (NOTES[i].number == currNumber) { NOTES[i].isPressed = true } } }; currentSpan.onmouseout = currentSpan.onmouseup = currentSpan.ontouchend = function () { let currNumber = parseInt(this.getAttribute("number")); for (let i = 0; i < NOTES.length; i++) { if (NOTES[i].number == currNumber) { NOTES[i].isPressed = false } } }; keyboard1.appendChild(currentSpan) } } function renderKeyboard2() { keyboard2.style.height = (divTwin.offsetHeight - (2 * document.getElementsByClassName("divTitles")[0].offsetHeight)) / 2; widthEachNoteKeyboard2 = keyboard2.offsetWidth / NUM_OF_WHITES_VISIBLED_KEYBOARD_2; let currentWhiteNoteLeft = 0; for (let i = 0; i < NUM_OF_NOTES; i++) { let currentSpan = document.createElement("span"); currentSpan.setAttribute("id", "key2_" + NOTES[i].number); currentSpan.setAttribute("number", NOTES[i].number); currentSpan.style.width = widthEachNoteKeyboard2; if (NOTES[i].isWhiteKey) { currentSpan.classList.add("spanWhiteNote"); currentSpan.style.left = currentWhiteNoteLeft; currentSpan.style.height = keyboard2.offsetHeight; currentWhiteNoteLeft += widthEachNoteKeyboard2 } else { currentSpan.classList.add("spanBlackNote"); currentSpan.style.left = (currentWhiteNoteLeft - widthEachNoteKeyboard2 / 2); currentSpan.style.height = (3 * keyboard2.offsetHeight / 5) } currentSpan.onmousedown = currentSpan.ontouchstart = function () { let currNumber = parseInt(this.getAttribute("number")); for (let i = 0; i < NOTES.length; i++) { if (NOTES[i].number == currNumber) { NOTES[i].isPressed = true } } }; currentSpan.addEventListener("mousemove", function (a) { if (a.buttons > 0) { let currNumber = parseInt(this.getAttribute("number")); for (let i = 0; i < NOTES.length; i++) { if (NOTES[i].number == currNumber) { NOTES[i].isPressed = true } } } }); currentSpan.onmouseout = currentSpan.onmouseup = function () { let currNumber = parseInt(this.getAttribute("number")); for (let i = 0; i < NOTES.length; i++) { if (NOTES[i].number == currNumber) { NOTES[i].isPressed = false } } }; currentSpan.ontouchend = function (a) { let remains = []; for (let i = 0; i < a.touches.length; i++) { let touch = a.touches[i]; let element = document.elementFromPoint(touch.clientX, touch.clientY); if (element.getAttribute("id").indexOf("key2_") < 0) { continue } let number = parseInt(element.getAttribute("number")); if (remains.indexOf(number) < 0) { remains.push(number) } } for (let i = 0; i < NOTES.length; i++) { if (remains.indexOf(NOTES[i].number) < 0) { NOTES[i].isPressed = false } } }; keyboard2.appendChild(currentSpan); keyboard2.addEventListener("touchmove", function (a) { a.preventDefault(); let notes = []; for (let i = 0; i < a.touches.length; i++) { let touch = a.touches[i]; if (touch.clientX >= ToneSectionRect.left && touch.clientX <= ToneSectionRect.right && touch.clientY >= ToneSectionRect.top && touch.clientY <= ToneSectionRect.bottom) { isGliding = true; let currentSpan = document.elementFromPoint(touch.clientX, touch.clientY); if (!currentSpan) { return } let currNumber = parseInt(currentSpan.getAttribute("number")); if (notes.indexOf(currNumber) < 0) { notes.push(currNumber) } } } for (let i = 0; i < NOTES.length; i++) { let currNumber = NOTES[i].number; if (currNumber >= redMaskRange.left && currNumber <= redMaskRange.right) { continue } if (notes.indexOf(NOTES[i].number) >= 0) { NOTES[i].isPressed = true } else { NOTES[i].isPressed = false } } }) } } function setMasks() { if (!localStorage.redMask) { localStorage.redMask = DEFAULT_RED_MASK_START_POSITION } if (!localStorage.greenMask) { localStorage.greenMask = DEFAULT_GREEN_MASK_START_POSITION } redMask = document.createElement("div"); redMask.setAttribute("id", "divRedMask"); redMask.style.left = localStorage.redMask * widthEachNoteKeyboard0 - widthEachNoteKeyboard0; redMask.style.width = widthRedMask; redMask.style.height = keyboard0.offsetHeight + 1; greenMask = document.createElement("div"); greenMask.setAttribute("id", "divGreenMask"); greenMask.style.left = localStorage.greenMask * widthEachNoteKeyboard0 - widthEachNoteKeyboard0; greenMask.style.width = widthGreenMask; greenMask.style.height = keyboard0.offsetHeight + 1; keyboard0.appendChild(redMask); keyboard0.appendChild(greenMask); repositionKeyboards(); redMask.addEventListener("touchstart", function (a) { for (let i = 0; i < a.touches.length; i++) { if (a.touches[i].target == this) { initialPointerXRedMask = a.touches[i].clientX - redMask.offsetLeft; break } } isRedMaskDraged = true }); redMask.addEventListener("mousedown", function (a) { initialPointerXRedMask = a.offsetX; isRedMaskDraged = true }); greenMask.addEventListener("touchstart", function (a) { for (let i = 0; i < a.touches.length; i++) { if (a.touches[i].target == this) { initialPointerXGreenMask = a.touches[i].clientX - greenMask.offsetLeft; break } } isGreenMaskDraged = true }); greenMask.addEventListener("mousedown", function (a) { initialPointerXGreenMask = a.offsetX; isGreenMaskDraged = true }); redMask.addEventListener("touchmove", function (a) { a.preventDefault(); if (isRedMaskDraged) { let newLeft; for (let i = 0; i < a.touches.length; i++) { if (a.touches[i].target == this) { newLeft = a.touches[i].clientX - initialPointerXRedMask; break } } this.style.left = newLeft; let greenMaskLeft = greenMask.offsetLeft; if (newLeft + widthRedMask > greenMaskLeft) { this.style.left = greenMaskLeft - widthRedMask } if (newLeft < 0) { this.style.left = 0 } } }); redMask.addEventListener("mousemove", function (a) { if (isRedMaskDraged) { let newLeft = a.clientX - initialPointerXRedMask; this.style.left = newLeft; let greenMaskLeft = greenMask.offsetLeft; if (newLeft + widthRedMask > greenMaskLeft) { this.style.left = greenMaskLeft - widthRedMask } if (newLeft < 0) { this.style.left = 0 } } }); greenMask.addEventListener("touchmove", function (a) { a.preventDefault(); if (isGreenMaskDraged) { let newLeft; for (let i = 0; i < a.touches.length; i++) { if (a.touches[i].target == this) { newLeft = a.touches[i].clientX - initialPointerXGreenMask; break } } this.style.left = newLeft; let redMaskRight = redMask.offsetLeft + redMask.offsetWidth; if (newLeft < redMaskRight) { this.style.left = redMaskRight } if (newLeft > keyboard0.offsetWidth - greenMask.offsetWidth) { this.style.left = keyboard0.offsetWidth - greenMask.offsetWidth } } }); greenMask.addEventListener("mousemove", function (a) { if (isGreenMaskDraged) { let newLeft = a.clientX - initialPointerXGreenMask; this.style.left = newLeft; let redMaskRight = redMask.offsetLeft + redMask.offsetWidth; if (newLeft < redMaskRight) { this.style.left = redMaskRight } if (newLeft > keyboard0.offsetWidth - greenMask.offsetWidth) { this.style.left = keyboard0.offsetWidth - greenMask.offsetWidth } } }); redMask.addEventListener("touchend", function (a) { let isNoMore = true; for (let i = 0; i < a.touches.length; i++) { if (a.touches[i].target == this) { isNoMore = false; break } } if (isNoMore) { releaseMasks() } }); greenMask.addEventListener("touchend", function (a) { let isNoMore = true; for (let i = 0; i < a.touches.length; i++) { if (a.touches[i].target == this) { isNoMore = false; break } } if (isNoMore) { releaseMasks() } }) } function repositionKeyboards() { keyboard1.style.left = (-localStorage.redMask * widthEachNoteKeyboard1 + widthEachNoteKeyboard1); let firstKeyVisibleInAcmpSection = document.elementFromPoint(AcmpSection.offsetLeft + 5, AcmpSection.offsetTop + 5); let lastKeyVisibleInAcmpSection = document.elementFromPoint(document.body.offsetWidth - 5, AcmpSection.offsetTop + 5); redMaskRange.left = parseInt(firstKeyVisibleInAcmpSection.getAttribute("number")); redMaskRange.right = parseInt(lastKeyVisibleInAcmpSection.getAttribute("number")); keyboard2.style.left = (-localStorage.greenMask * widthEachNoteKeyboard2 + widthEachNoteKeyboard2) } function releaseMasks() { if (isRedMaskDraged) { isRedMaskDraged = false; let n = Math.round(redMask.offsetLeft / widthEachNoteKeyboard0); redMask.style.left = n * widthEachNoteKeyboard0; localStorage.redMask = n + 1 } if (isGreenMaskDraged) { isGreenMaskDraged = false; let n = Math.round(greenMask.offsetLeft / widthEachNoteKeyboard0); greenMask.style.left = n * widthEachNoteKeyboard0; localStorage.greenMask = n + 1 } repositionKeyboards() } function repositionWheels() { pitch.style.left = (wheels.offsetWidth - pitch.offsetWidth) / 2; pitch.style.top = (wheels.offsetHeight - pitch.offsetHeight) / 2 - document.getElementById("divPitchTitle").offsetHeight + 5; pitchMid.style.left = pitch.offsetLeft; pitchMid.style.top = pitch.offsetTop + (pitch.offsetHeight - pitchMid.offsetHeight) / 2; pitchMid.style.width = pitch.offsetWidth - 1; wheelValue.style.width = pitch.offsetWidth; wheelValue.style.left = (wheels.offsetWidth - wheelValue.offsetWidth) / 2; wheelValue.style.top = pitch.offsetTop - wheelValue.offsetHeight - 5; centerPitch = pitch.offsetHeight / 2; pitchUpper.style.width = pitchLower.style.width = pitch.offsetWidth } function releasePitch() { if (isPitchDraged) { isPitchDraged = false; pitchUpper.style.visibility = "hidden"; pitchLower.style.visibility = "hidden"; pitchValue = 0; wheelValue.innerHTML = pitchValue } } function ToneSectionRectCalc() { ToneSectionRect.left = ToneSection.offsetLeft; ToneSectionRect.top = ToneSection.offsetTop + document.getElementById("divSectionTone").offsetHeight; ToneSectionRect.right = document.body.offsetWidth; ToneSectionRect.bottom = ToneSectionRect.top + ToneSection.offsetHeight };